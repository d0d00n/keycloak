<?php

/**
 * @file
 * Keycloak module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_modules_installed().
 */
function keycloak_modules_installed($modules) {
  // Whether the keycloak module was installed.
  if (in_array('keycloak', $modules)) {
    // Show configuration page hint.
    $settings = Url::fromRoute('openid_connect.admin_settings')->toString();
    drupal_set_message(t('You can now enable Keycloak OpenID Connect sign in at the <a href=":settings">OpenID Connect settings</a> page.', [
      ':settings' => $settings,
    ]));
  }
}

/**
 * Implements hook_help().
 */
function keycloak_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the keycloak module.
    case 'help.page.keycloak':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Keycloak module allows you to authenticate your users against a Keycloak authentication server. You can enable the Keycloak client within the <a href=":settings">OpenID Connect settings</a> page. For more information, see the <a href=":documentation">online documentation for the Keycloak module</a>.', [
        ':settings' => Url::fromRoute('openid_connect.admin_settings')->toString(),
        ':documentation' => 'https://www.drupal.org/docs/8/modules/keycloak-openid-connect',
      ]) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Login to Drupal using Keycloak OpenID Connect') . '</dt>';
      $output .= '<dd>' . t('Your Drupal users can use an external Keycloak authentication server to register and login to your Drupal site.') . '</dd>';
      $output .= '<dt>' . t('Synchronize user fields with OpenID claims') . '</dt>';
      $output .= '<dd>' . t("During login and user registration you can synchronize user attributes with OpenID claims using the OpenID Connect module's claim mapping.") . '</dd>';
      $output .= '<dt>' . t('Synchronize email address changes from within Keycloak') . '</dt>';
      $output .= '<dd>' . t("If the user's email address changed in Keycloak, you can synchronize this change with the Drupal user's email address.") . '</dd>';
      $output .= '<dt>' . t('Multi-language support') . '</dt>';
      $output .= '<dd>' . t("When using a multi-language Drupal site and a multi-language Keycloak authentication server, you can forward language parameters to the login and register pages and map Keycloak locales to the Drupal user's language settings.") . '</dd>';
      $output .= '</dl>';
      return $output;

  }
}

/**
 * Implements hook_form_FORM_ID_alter() for openid_connect_admin_settings.
 */
function keycloak_form_openid_connect_admin_settings_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Add our own submit handler to preprocess Keycloak setting values.
  if (!$form_state->get('keycloak_processed')) {
    array_unshift($form['#submit'], 'keycloak_form_openid_connect_admin_settings_submit');
    $form_state->set('keycloak_processed', TRUE);
  }
}

/**
 * Custom submit handler to alter submitted values of the settings form.
 *
 * @param array $form
 *   An associative array containing the structure of the plugin form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function keycloak_form_openid_connect_admin_settings_submit(array &$form, FormStateInterface $form_state) {
  // Whether Keycloak is enabled and we have to sanitize
  // Keycloak setting values.
  if (empty($form_state->getValue(['clients_enabled', 'keycloak']))) {
    // Don't bother with sanitizing, as the Keycloak settings won't be saved.
    return;
  }

  // Sanitize Keycloak setting values.
  $settings = $form_state->getValue(['clients', 'keycloak', 'settings']);

  // Remove trailing slashes from base URL.
  $settings['keycloak_base'] = rtrim($settings['keycloak_base'], '/ ');

  // Keycloak language mapping.
  $settings['keycloak_i18n']['enabled'] = !empty($settings['keycloak_i18n_enabled']);
  unset($settings['keycloak_i18n_enabled']);
  // Store those mappings only, that differ from default locales.
  $mappings = $settings['keycloak_i18n']['mapping'];
  $mappings_save = [];
  if (!empty($mappings)) {
    foreach ($mappings as $mapping) {
      if (empty($mapping['target']) || $mapping['langcode'] == $mapping['target']) {
        continue;
      }
      $mappings_save[] = $mapping;
    }
  }
  $settings['keycloak_i18n']['mapping'] = $mappings_save;

  $form_state->setValue(['clients', 'keycloak', 'settings'], $settings);
}
